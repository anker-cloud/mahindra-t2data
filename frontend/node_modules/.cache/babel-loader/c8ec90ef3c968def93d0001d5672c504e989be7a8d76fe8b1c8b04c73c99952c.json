{"ast":null,"code":"// import React, { useState, useEffect, useRef } from 'react';\n// import ReactMarkdown from 'react-markdown';\n// import remarkGfm from 'remark-gfm';\n// import './ChatInterface.css';\n// // Placeholder for an icon, you would typically use an SVG or an icon library\n// const SendIcon = () => (\n//   <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n//     <path d=\"M2.01 21L23 12L2.01 3L2 10L17 12L2 14L2.01 21Z\" fill=\"currentColor\"/>\n//   </svg>\n// );\n// // Simple Typing Indicator Component\n// const TypingIndicator = () => {\n//   const phrases = [\n//     \"  Thinking about the query\",\n//     \"  Understanding the table schema and underlying data\",\n//     \"  Generating a plan to come up with answers and insights\",\n//     \"  Performing accurate NL2SQL conversion\",\n//     \"  Making API calls to BigQuery\",\n//     \"  Fetching SQL response from BigQuery\",\n//     \"  Processing result\",\n//   ];\n//   const [currentPhraseIndex, setCurrentPhraseIndex] = useState(0);\n//   useEffect(() => {\n//     const interval = setInterval(() => {\n//       setCurrentPhraseIndex((prevIndex) => (prevIndex + 1) % phrases.length);\n//     }, 5000); // Change phrase every 2 seconds\n//     return () => clearInterval(interval); // Clean up the interval on component unmount\n//   }, [phrases.length]);\n//   return (\n//     <div className=\"message bot typing-indicator\">\n//       <div className=\"message-bubble\">\n//       <div className=\"typing-dots\">\n//           <span className=\"dot\"></span>\n//           <span className=\"dot\"></span>\n//           <span className=\"dot\"></span>\n//         </div>\n//         <div className=\"typing-text\">\n//           {phrases[currentPhraseIndex]}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n// const suggestedQuestions = [\n//   { heading: 'Understanding BQ Dataset', question: 'Describe the tables and the data that you can answer questions over.' },\n//   { heading: 'Higher Distribution Cost', question: 'Identify and show distribution centers with unusually high distribution costs relative to the average distribution costs for similar product categories?'},\n//   { heading: 'Problematic Product categories', question: 'Calculate the return rate per product category, considering only orders that have been both shipped and delivered, to identify problematic product categories?' },\n//   { heading: 'Multi-Channel Attribution', question: 'Calculate the conversion rate (percentage of events leading to an order) for each browser type, to optimize website compatibility and user experience?' },\n//   { heading: 'Most Expensive Products', question: 'Find the top 5 most expensive products (based on retail price) within each category?' },\n//   { heading: 'Potential Bot Attacks', question: 'Identify IP addresses associated with a disproportionately high number of distinct user sessions, potentially indicating shared proxies or bot networks?' },\n// ];\n// const ChatInterface = () => {\n//   const [messages, setMessages] = useState([\n//     { id: 1, text: \"Hello! I am Retail DataWise. I can answer business questions over your BigQuery data. How can I assist you today?\", sender: 'bot', timestamp: new Date() }\n//   ]);\n//   const [inputValue, setInputValue] = useState('');\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [sessionId, setSessionId] = useState(null);\n//   const [userId] = useState(`user_${Date.now()}`); // Simple unique user ID\n//   const messagesEndRef = useRef(null);\n//   const scrollToBottom = () => {\n//     messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n//   };\n//   useEffect(scrollToBottom, [messages]);\n//   const handleInputChange = (e) => {\n//     setInputValue(e.target.value);\n//   };\n//   const handleSuggestionClick = (question) => {\n//     setInputValue(question); // Set the input value to the suggested question\n//     // Programmatically trigger the send message action\n//     // We need to simulate the event object or modify handleSendMessage to accept the message directly\n//     // Let's modify handleSendMessage to accept an optional message string\n//     // handleSendMessage({ preventDefault: () => {} }, question); // Pass a dummy event and the question\n//   };\n//   // Modify handleSendMessage to accept an optional message string\n//   const handleSendMessage = async (e, messageString = inputValue) => {\n//     e.preventDefault();\n//     const messageToSend = messageString.trim(); // Use the passed string or current inputValue\n//     if (messageToSend === '' || isLoading) return;\n//     const userMessage = { id: Date.now(), text: messageToSend, sender: 'user', timestamp: new Date() };\n//     setMessages(prevMessages => [...prevMessages, userMessage]);\n//     setInputValue(''); // Clear input after sending\n//     setIsLoading(true);\n//     try {\n//       let requestBody;\n//       const currentInputValue = messageToSend; // Use the captured messageToSend\n//       if (!sessionId) {\n//         console.log(\"No session ID, creating a new session and sending message...\");\n//         requestBody = {\n//           user_id: userId,\n//           message: { message: currentInputValue, role: 'user' }\n//         };\n//       } else {\n//         console.log(\"Existing session ID, sending message:\", sessionId);\n//         requestBody = {\n//           user_id: userId,\n//           session_id: sessionId,\n//           message: { message: currentInputValue, role: 'user' }\n//         };\n//       }\n//       const response = await fetch('/api/chat', {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify(requestBody)\n//       });\n//       if (!response.ok) {\n//         const errorData = await response.json().catch(() => ({ detail: \"Unknown error occurred\" }));\n//         throw new Error(`HTTP error! status: ${response.status} - ${errorData.detail || errorData.error || \"Failed to send/process message\"}`);\n//       }\n//       const data = await response.json();\n//       if (!sessionId && data.session_id) {\n//         setSessionId(data.session_id);\n//         console.log(\"New session created and ID set:\", data.session_id);\n//       }\n//       if (data.messages && data.messages.length > 0) {\n//         const botReplies = data.messages.map((msg, index) => ({\n//           id: Date.now() + index,\n//           text: msg.content,\n//           sender: msg.role === 'user' ? 'user' : 'bot',\n//           timestamp: new Date()\n//         }));\n//         setMessages(prevMessages => [...prevMessages, ...botReplies]);\n//       } else if (data.error) {\n//          throw new Error(data.error);\n//       } else if (!sessionId && !data.session_id) {\n//         throw new Error(\"Failed to retrieve session ID and no messages received.\");\n//       } else if (data.messages && data.messages.length === 0) {\n//         console.warn(\"Received empty messages array from bot, but no error:\", data);\n//       }\n//     } catch (error) {\n//       console.error('Error sending message:', error);\n//       setMessages(prevMessages => [...prevMessages, { id: Date.now(), text: `Error: ${error.message}`, sender: 'system', timestamp: new Date() }]);\n//     } finally {\n//         setIsLoading(false);\n//         document.querySelector('.chat-input input')?.focus();\n//     }\n//   };\n//   const formatTimestamp = (date) => {\n//     return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n//   };\n//   return (\n//     <div className=\"chat-interface-page\"> {/* Renamed for clarity and page-level styling */}\n//       <header className=\"page-header chat-page-header\">\n//         <h1>DataWise Agent Chat</h1>\n//       </header>\n//       <div className=\"chat-interface\"> {/* Kept original for existing styles, will adjust CSS */}\n//         <div className=\"chat-messages\">\n//           {messages.map((msg) => (\n//             <div key={msg.id} className={`message ${msg.sender}`}>\n//             <div className=\"message-bubble\">\n//               <ReactMarkdown className=\"message-text\" remarkPlugins={[remarkGfm]}>{msg.text}</ReactMarkdown>\n//               <span className=\"message-timestamp\">{formatTimestamp(msg.timestamp)}</span>\n//             </div>\n//           </div>\n//         ))}\n//         {isLoading && messages[messages.length - 1]?.sender === 'user' && <TypingIndicator />} {/* Conditionally render typing indicator */}\n//         <div ref={messagesEndRef} />\n//       </div>\n//       <div className=\"suggested-questions\">\n//         {suggestedQuestions.map((suggestion, index) => (\n//           <div\n//             key={index}\n//             className=\"suggestion-card\"\n//             onClick={() => handleSuggestionClick(suggestion.question)}\n//           >\n//             <h4>{suggestion.heading}</h4>\n//             <p>{suggestion.question}</p>\n//           </div>\n//         ))}\n//       </div>\n//       <form className=\"chat-input-area\" onSubmit={handleSendMessage}>\n//         <input\n//           type=\"text\"\n//           value={inputValue}\n//           onChange={handleInputChange}\n//           placeholder=\"Type your message...\"\n//           aria-label=\"Chat input\"\n//           disabled={isLoading}\n//         />\n//         <button type=\"submit\" disabled={isLoading || inputValue.trim() === ''} aria-label=\"Send message\">\n//           {isLoading ? <div className=\"loader\"></div> : <SendIcon />}\n//         </button>\n//       </form>\n//       </div>\n//     </div>\n//   );\n// };\n// export default ChatInterface;\nimport React,{useState,useEffect,useRef}from'react';import ReactMarkdown from'react-markdown';import remarkGfm from'remark-gfm';import'./ChatInterface.css';// Placeholder for an icon\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const SendIcon=()=>/*#__PURE__*/_jsx(\"svg\",{width:\"24\",height:\"24\",viewBox:\"0 0 24 24\",fill:\"none\",xmlns:\"http://www.w3.org/2000/svg\",children:/*#__PURE__*/_jsx(\"path\",{d:\"M2.01 21L23 12L2.01 3L2 10L17 12L2 14L2.01 21Z\",fill:\"currentColor\"})});// Typing Indicator Component\nconst TypingIndicator=()=>{const phrases=[\"Thinking about the query\",\"Understanding the table schema and underlying data\",\"Generating a plan to come up with answers and insights\",\"Performing accurate NL2SQL conversion\",\"Making API calls to BigQuery\",\"Fetching SQL response from BigQuery\",\"Processing result\"];const[currentPhraseIndex,setCurrentPhraseIndex]=useState(0);useEffect(()=>{const interval=setInterval(()=>{setCurrentPhraseIndex(prevIndex=>(prevIndex+1)%phrases.length);},5000);return()=>clearInterval(interval);},[phrases.length]);return/*#__PURE__*/_jsx(\"div\",{className:\"message bot typing-indicator\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"message-bubble\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"typing-dots\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"dot\"}),/*#__PURE__*/_jsx(\"span\",{className:\"dot\"}),/*#__PURE__*/_jsx(\"span\",{className:\"dot\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"typing-text\",children:phrases[currentPhraseIndex]})]})});};/* ---- Suggested Questions (Commented Out) ----\r\n// const suggestedQuestions = [\r\n//   { heading: 'Understanding BQ Dataset', question: 'Describe the tables and the data that you can answer questions over.' },\r\n//   { heading: 'Higher Distribution Cost', question: 'Identify and show distribution centers with unusually high distribution costs relative to the average distribution costs for similar product categories?' },\r\n//   { heading: 'Problematic Product categories', question: 'Calculate the return rate per product category, considering only orders that have been both shipped and delivered, to identify problematic product categories?' },\r\n//   { heading: 'Multi-Channel Attribution', question: 'Calculate the conversion rate (percentage of events leading to an order) for each browser type, to optimize website compatibility and user experience?' },\r\n//   { heading: 'Most Expensive Products', question: 'Find the top 5 most expensive products (based on retail price) within each category?' },\r\n//   { heading: 'Potential Bot Attacks', question: 'Identify IP addresses associated with a disproportionately high number of distinct user sessions, potentially indicating shared proxies or bot networks?' },\r\n// ];\r\n*/const ChatInterface=_ref=>{var _messages;let{username}=_ref;const[messages,setMessages]=useState([{id:1,text:`Hello! I am Retail DataWise. I can answer business questions over your BigQuery data. How can I assist you today, ${username}?`,sender:'bot',timestamp:new Date()}]);const[inputValue,setInputValue]=useState('');const[isLoading,setIsLoading]=useState(false);const[sessionId,setSessionId]=useState(null);const[userId]=useState(`user_${Date.now()}`);const[error,setError]=useState(null);const messagesEndRef=useRef(null);const scrollToBottom=()=>{var _messagesEndRef$curre;(_messagesEndRef$curre=messagesEndRef.current)===null||_messagesEndRef$curre===void 0?void 0:_messagesEndRef$curre.scrollIntoView({behavior:\"smooth\"});};useEffect(()=>{scrollToBottom();console.log('ChatInterface mounted for user:',username);},[messages,username]);const handleInputChange=e=>{setInputValue(e.target.value);};const handleSendMessage=async function(e){let messageString=arguments.length>1&&arguments[1]!==undefined?arguments[1]:inputValue;e.preventDefault();const messageToSend=messageString.trim();if(messageToSend===''||isLoading)return;const userMessage={id:Date.now(),text:messageToSend,sender:'user',timestamp:new Date()};setMessages(prev=>[...prev,userMessage]);setInputValue('');setIsLoading(true);setError(null);try{const requestBody={user_id:userId,...(sessionId&&{session_id:sessionId}),message:{message:messageToSend,role:'user'}};console.log('Sending request to /api/chat:',requestBody);const response=await fetch('/api/chat',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(requestBody)});if(!response.ok){const errorData=await response.json().catch(()=>({detail:\"Unknown error\"}));throw new Error(`HTTP error! status: ${response.status} - ${errorData.detail||errorData.error||\"Failed to send/process message\"}`);}const data=await response.json();console.log('Response from /api/chat:',data);if(!sessionId&&data.session_id){setSessionId(data.session_id);console.log('New session ID:',data.session_id);}if(data.messages&&data.messages.length>0){const botReplies=data.messages.map((msg,index)=>({id:Date.now()+index+1,text:msg.content,sender:msg.role==='user'?'user':'bot',timestamp:new Date()}));setMessages(prev=>[...prev,...botReplies]);}else if(data.error){throw new Error(data.error);}else if(!sessionId&&!data.session_id){console.warn('No session ID or messages received');}}catch(err){console.error('Error in handleSendMessage:',err);setError(`Failed to get response: ${err.message}`);setMessages(prev=>[...prev,{id:Date.now(),text:`Error: ${err.message}`,sender:'system',timestamp:new Date()}]);}finally{var _document$querySelect;setIsLoading(false);(_document$querySelect=document.querySelector('.chat-input-area input'))===null||_document$querySelect===void 0?void 0:_document$querySelect.focus();}};const formatTimestamp=date=>{return date.toLocaleTimeString([],{hour:'2-digit',minute:'2-digit'});};return/*#__PURE__*/_jsxs(\"div\",{className:\"chat-interface-page\",children:[/*#__PURE__*/_jsx(\"header\",{className:\"page-header chat-page-header\",children:/*#__PURE__*/_jsx(\"h1\",{children:\"DataWise Agent Chat\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"chat-interface\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chat-messages\",children:[messages.map(msg=>/*#__PURE__*/_jsx(\"div\",{className:`message ${msg.sender}`,children:/*#__PURE__*/_jsxs(\"div\",{className:\"message-bubble\",children:[/*#__PURE__*/_jsx(ReactMarkdown,{className:\"message-text\",remarkPlugins:[remarkGfm],children:msg.text}),/*#__PURE__*/_jsx(\"span\",{className:\"message-timestamp\",children:formatTimestamp(msg.timestamp)})]})},msg.id)),error&&/*#__PURE__*/_jsx(\"div\",{className:\"message system\",children:/*#__PURE__*/_jsx(\"div\",{className:\"message-bubble\",children:/*#__PURE__*/_jsx(\"span\",{className:\"message-text\",children:error})})}),isLoading&&((_messages=messages[messages.length-1])===null||_messages===void 0?void 0:_messages.sender)==='user'&&/*#__PURE__*/_jsx(TypingIndicator,{}),/*#__PURE__*/_jsx(\"div\",{ref:messagesEndRef})]}),/*#__PURE__*/_jsxs(\"form\",{className:\"chat-input-area\",onSubmit:handleSendMessage,children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:inputValue,onChange:handleInputChange,placeholder:\"Type your message...\",\"aria-label\":\"Chat input\",disabled:isLoading}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",disabled:isLoading||inputValue.trim()==='',\"aria-label\":\"Send message\",children:isLoading?/*#__PURE__*/_jsx(\"div\",{className:\"loader\"}):/*#__PURE__*/_jsx(SendIcon,{})})]})]})]});};export default ChatInterface;","map":{"version":3,"names":["React","useState","useEffect","useRef","ReactMarkdown","remarkGfm","jsx","_jsx","jsxs","_jsxs","SendIcon","width","height","viewBox","fill","xmlns","children","d","TypingIndicator","phrases","currentPhraseIndex","setCurrentPhraseIndex","interval","setInterval","prevIndex","length","clearInterval","className","ChatInterface","_ref","_messages","username","messages","setMessages","id","text","sender","timestamp","Date","inputValue","setInputValue","isLoading","setIsLoading","sessionId","setSessionId","userId","now","error","setError","messagesEndRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","console","log","handleInputChange","e","target","value","handleSendMessage","messageString","arguments","undefined","preventDefault","messageToSend","trim","userMessage","prev","requestBody","user_id","session_id","message","role","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","catch","detail","Error","status","data","botReplies","map","msg","index","content","warn","err","_document$querySelect","document","querySelector","focus","formatTimestamp","date","toLocaleTimeString","hour","minute","remarkPlugins","ref","onSubmit","type","onChange","placeholder","disabled"],"sources":["C:/Users/Lenovo/Desktop/Mahindra-T2-data/mahindra-t2data/frontend/src/components/ChatInterface/ChatInterface.js"],"sourcesContent":["// import React, { useState, useEffect, useRef } from 'react';\r\n// import ReactMarkdown from 'react-markdown';\r\n// import remarkGfm from 'remark-gfm';\r\n// import './ChatInterface.css';\r\n\r\n// // Placeholder for an icon, you would typically use an SVG or an icon library\r\n// const SendIcon = () => (\r\n//   <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n//     <path d=\"M2.01 21L23 12L2.01 3L2 10L17 12L2 14L2.01 21Z\" fill=\"currentColor\"/>\r\n//   </svg>\r\n// );\r\n\r\n// // Simple Typing Indicator Component\r\n// const TypingIndicator = () => {\r\n//   const phrases = [\r\n//     \"  Thinking about the query\",\r\n//     \"  Understanding the table schema and underlying data\",\r\n//     \"  Generating a plan to come up with answers and insights\",\r\n//     \"  Performing accurate NL2SQL conversion\",\r\n//     \"  Making API calls to BigQuery\",\r\n//     \"  Fetching SQL response from BigQuery\",\r\n//     \"  Processing result\",\r\n//   ];\r\n//   const [currentPhraseIndex, setCurrentPhraseIndex] = useState(0);\r\n\r\n//   useEffect(() => {\r\n//     const interval = setInterval(() => {\r\n//       setCurrentPhraseIndex((prevIndex) => (prevIndex + 1) % phrases.length);\r\n//     }, 5000); // Change phrase every 2 seconds\r\n\r\n//     return () => clearInterval(interval); // Clean up the interval on component unmount\r\n//   }, [phrases.length]);\r\n\r\n//   return (\r\n//     <div className=\"message bot typing-indicator\">\r\n//       <div className=\"message-bubble\">\r\n//       <div className=\"typing-dots\">\r\n//           <span className=\"dot\"></span>\r\n//           <span className=\"dot\"></span>\r\n//           <span className=\"dot\"></span>\r\n//         </div>\r\n//         <div className=\"typing-text\">\r\n//           {phrases[currentPhraseIndex]}\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// const suggestedQuestions = [\r\n//   { heading: 'Understanding BQ Dataset', question: 'Describe the tables and the data that you can answer questions over.' },\r\n//   { heading: 'Higher Distribution Cost', question: 'Identify and show distribution centers with unusually high distribution costs relative to the average distribution costs for similar product categories?'},\r\n//   { heading: 'Problematic Product categories', question: 'Calculate the return rate per product category, considering only orders that have been both shipped and delivered, to identify problematic product categories?' },\r\n//   { heading: 'Multi-Channel Attribution', question: 'Calculate the conversion rate (percentage of events leading to an order) for each browser type, to optimize website compatibility and user experience?' },\r\n//   { heading: 'Most Expensive Products', question: 'Find the top 5 most expensive products (based on retail price) within each category?' },\r\n//   { heading: 'Potential Bot Attacks', question: 'Identify IP addresses associated with a disproportionately high number of distinct user sessions, potentially indicating shared proxies or bot networks?' },\r\n// ];\r\n\r\n// const ChatInterface = () => {\r\n//   const [messages, setMessages] = useState([\r\n//     { id: 1, text: \"Hello! I am Retail DataWise. I can answer business questions over your BigQuery data. How can I assist you today?\", sender: 'bot', timestamp: new Date() }\r\n//   ]);\r\n//   const [inputValue, setInputValue] = useState('');\r\n//   const [isLoading, setIsLoading] = useState(false);\r\n//   const [sessionId, setSessionId] = useState(null);\r\n//   const [userId] = useState(`user_${Date.now()}`); // Simple unique user ID\r\n\r\n//   const messagesEndRef = useRef(null);\r\n\r\n//   const scrollToBottom = () => {\r\n//     messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n//   };\r\n\r\n//   useEffect(scrollToBottom, [messages]);\r\n\r\n//   const handleInputChange = (e) => {\r\n//     setInputValue(e.target.value);\r\n//   };\r\n\r\n//   const handleSuggestionClick = (question) => {\r\n//     setInputValue(question); // Set the input value to the suggested question\r\n//     // Programmatically trigger the send message action\r\n//     // We need to simulate the event object or modify handleSendMessage to accept the message directly\r\n//     // Let's modify handleSendMessage to accept an optional message string\r\n//     // handleSendMessage({ preventDefault: () => {} }, question); // Pass a dummy event and the question\r\n//   };\r\n\r\n//   // Modify handleSendMessage to accept an optional message string\r\n//   const handleSendMessage = async (e, messageString = inputValue) => {\r\n//     e.preventDefault();\r\n//     const messageToSend = messageString.trim(); // Use the passed string or current inputValue\r\n//     if (messageToSend === '' || isLoading) return;\r\n\r\n//     const userMessage = { id: Date.now(), text: messageToSend, sender: 'user', timestamp: new Date() };\r\n//     setMessages(prevMessages => [...prevMessages, userMessage]);\r\n//     setInputValue(''); // Clear input after sending\r\n//     setIsLoading(true);\r\n\r\n//     try {\r\n//       let requestBody;\r\n//       const currentInputValue = messageToSend; // Use the captured messageToSend\r\n\r\n//       if (!sessionId) {\r\n//         console.log(\"No session ID, creating a new session and sending message...\");\r\n//         requestBody = {\r\n//           user_id: userId,\r\n//           message: { message: currentInputValue, role: 'user' }\r\n//         };\r\n//       } else {\r\n//         console.log(\"Existing session ID, sending message:\", sessionId);\r\n//         requestBody = {\r\n//           user_id: userId,\r\n//           session_id: sessionId,\r\n//           message: { message: currentInputValue, role: 'user' }\r\n//         };\r\n//       }\r\n\r\n//       const response = await fetch('/api/chat', {\r\n//         method: 'POST',\r\n//         headers: { 'Content-Type': 'application/json' },\r\n//         body: JSON.stringify(requestBody)\r\n//       });\r\n\r\n//       if (!response.ok) {\r\n//         const errorData = await response.json().catch(() => ({ detail: \"Unknown error occurred\" }));\r\n//         throw new Error(`HTTP error! status: ${response.status} - ${errorData.detail || errorData.error || \"Failed to send/process message\"}`);\r\n//       }\r\n\r\n//       const data = await response.json();\r\n\r\n//       if (!sessionId && data.session_id) {\r\n//         setSessionId(data.session_id);\r\n//         console.log(\"New session created and ID set:\", data.session_id);\r\n//       }\r\n\r\n//       if (data.messages && data.messages.length > 0) {\r\n//         const botReplies = data.messages.map((msg, index) => ({\r\n//           id: Date.now() + index,\r\n//           text: msg.content,\r\n//           sender: msg.role === 'user' ? 'user' : 'bot',\r\n//           timestamp: new Date()\r\n//         }));\r\n//         setMessages(prevMessages => [...prevMessages, ...botReplies]);\r\n//       } else if (data.error) {\r\n//          throw new Error(data.error);\r\n//       } else if (!sessionId && !data.session_id) {\r\n//         throw new Error(\"Failed to retrieve session ID and no messages received.\");\r\n//       } else if (data.messages && data.messages.length === 0) {\r\n//         console.warn(\"Received empty messages array from bot, but no error:\", data);\r\n//       }\r\n\r\n//     } catch (error) {\r\n//       console.error('Error sending message:', error);\r\n//       setMessages(prevMessages => [...prevMessages, { id: Date.now(), text: `Error: ${error.message}`, sender: 'system', timestamp: new Date() }]);\r\n//     } finally {\r\n//         setIsLoading(false);\r\n//         document.querySelector('.chat-input input')?.focus();\r\n//     }\r\n//   };\r\n\r\n//   const formatTimestamp = (date) => {\r\n//     return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"chat-interface-page\"> {/* Renamed for clarity and page-level styling */}\r\n//       <header className=\"page-header chat-page-header\">\r\n//         <h1>DataWise Agent Chat</h1>\r\n//       </header>\r\n//       <div className=\"chat-interface\"> {/* Kept original for existing styles, will adjust CSS */}\r\n//         <div className=\"chat-messages\">\r\n//           {messages.map((msg) => (\r\n//             <div key={msg.id} className={`message ${msg.sender}`}>\r\n//             <div className=\"message-bubble\">\r\n//               <ReactMarkdown className=\"message-text\" remarkPlugins={[remarkGfm]}>{msg.text}</ReactMarkdown>\r\n//               <span className=\"message-timestamp\">{formatTimestamp(msg.timestamp)}</span>\r\n//             </div>\r\n//           </div>\r\n//         ))}\r\n//         {isLoading && messages[messages.length - 1]?.sender === 'user' && <TypingIndicator />} {/* Conditionally render typing indicator */}\r\n//         <div ref={messagesEndRef} />\r\n//       </div>\r\n//       <div className=\"suggested-questions\">\r\n//         {suggestedQuestions.map((suggestion, index) => (\r\n//           <div\r\n//             key={index}\r\n//             className=\"suggestion-card\"\r\n//             onClick={() => handleSuggestionClick(suggestion.question)}\r\n//           >\r\n//             <h4>{suggestion.heading}</h4>\r\n//             <p>{suggestion.question}</p>\r\n//           </div>\r\n//         ))}\r\n//       </div>\r\n//       <form className=\"chat-input-area\" onSubmit={handleSendMessage}>\r\n//         <input\r\n//           type=\"text\"\r\n//           value={inputValue}\r\n//           onChange={handleInputChange}\r\n//           placeholder=\"Type your message...\"\r\n//           aria-label=\"Chat input\"\r\n//           disabled={isLoading}\r\n//         />\r\n//         <button type=\"submit\" disabled={isLoading || inputValue.trim() === ''} aria-label=\"Send message\">\r\n//           {isLoading ? <div className=\"loader\"></div> : <SendIcon />}\r\n//         </button>\r\n//       </form>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ChatInterface;\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport ReactMarkdown from 'react-markdown';\r\nimport remarkGfm from 'remark-gfm';\r\nimport './ChatInterface.css';\r\n\r\n// Placeholder for an icon\r\nconst SendIcon = () => (\r\n  <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path d=\"M2.01 21L23 12L2.01 3L2 10L17 12L2 14L2.01 21Z\" fill=\"currentColor\"/>\r\n  </svg>\r\n);\r\n\r\n// Typing Indicator Component\r\nconst TypingIndicator = () => {\r\n  const phrases = [\r\n    \"Thinking about the query\",\r\n    \"Understanding the table schema and underlying data\",\r\n    \"Generating a plan to come up with answers and insights\",\r\n    \"Performing accurate NL2SQL conversion\",\r\n    \"Making API calls to BigQuery\",\r\n    \"Fetching SQL response from BigQuery\",\r\n    \"Processing result\",\r\n  ];\r\n  const [currentPhraseIndex, setCurrentPhraseIndex] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setCurrentPhraseIndex((prevIndex) => (prevIndex + 1) % phrases.length);\r\n    }, 5000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [phrases.length]);\r\n\r\n  return (\r\n    <div className=\"message bot typing-indicator\">\r\n      <div className=\"message-bubble\">\r\n        <div className=\"typing-dots\">\r\n          <span className=\"dot\"></span>\r\n          <span className=\"dot\"></span>\r\n          <span className=\"dot\"></span>\r\n        </div>\r\n        <div className=\"typing-text\">{phrases[currentPhraseIndex]}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n/* ---- Suggested Questions (Commented Out) ----\r\n// const suggestedQuestions = [\r\n//   { heading: 'Understanding BQ Dataset', question: 'Describe the tables and the data that you can answer questions over.' },\r\n//   { heading: 'Higher Distribution Cost', question: 'Identify and show distribution centers with unusually high distribution costs relative to the average distribution costs for similar product categories?' },\r\n//   { heading: 'Problematic Product categories', question: 'Calculate the return rate per product category, considering only orders that have been both shipped and delivered, to identify problematic product categories?' },\r\n//   { heading: 'Multi-Channel Attribution', question: 'Calculate the conversion rate (percentage of events leading to an order) for each browser type, to optimize website compatibility and user experience?' },\r\n//   { heading: 'Most Expensive Products', question: 'Find the top 5 most expensive products (based on retail price) within each category?' },\r\n//   { heading: 'Potential Bot Attacks', question: 'Identify IP addresses associated with a disproportionately high number of distinct user sessions, potentially indicating shared proxies or bot networks?' },\r\n// ];\r\n*/\r\n\r\nconst ChatInterface = ({ username }) => {\r\n  const [messages, setMessages] = useState([\r\n    { id: 1, text: `Hello! I am Retail DataWise. I can answer business questions over your BigQuery data. How can I assist you today, ${username}?`, sender: 'bot', timestamp: new Date() }\r\n  ]);\r\n  const [inputValue, setInputValue] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [sessionId, setSessionId] = useState(null);\r\n  const [userId] = useState(`user_${Date.now()}`);\r\n  const [error, setError] = useState(null);\r\n\r\n  const messagesEndRef = useRef(null);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n    console.log('ChatInterface mounted for user:', username);\r\n  }, [messages, username]);\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSendMessage = async (e, messageString = inputValue) => {\r\n    e.preventDefault();\r\n    const messageToSend = messageString.trim();\r\n    if (messageToSend === '' || isLoading) return;\r\n\r\n    const userMessage = { id: Date.now(), text: messageToSend, sender: 'user', timestamp: new Date() };\r\n    setMessages((prev) => [...prev, userMessage]);\r\n    setInputValue('');\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const requestBody = {\r\n        user_id: userId,\r\n        ...(sessionId && { session_id: sessionId }),\r\n        message: { message: messageToSend, role: 'user' }\r\n      };\r\n\r\n      console.log('Sending request to /api/chat:', requestBody);\r\n      const response = await fetch('/api/chat', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(requestBody)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({ detail: \"Unknown error\" }));\r\n        throw new Error(`HTTP error! status: ${response.status} - ${errorData.detail || errorData.error || \"Failed to send/process message\"}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log('Response from /api/chat:', data);\r\n\r\n      if (!sessionId && data.session_id) {\r\n        setSessionId(data.session_id);\r\n        console.log('New session ID:', data.session_id);\r\n      }\r\n\r\n      if (data.messages && data.messages.length > 0) {\r\n        const botReplies = data.messages.map((msg, index) => ({\r\n          id: Date.now() + index + 1,\r\n          text: msg.content,\r\n          sender: msg.role === 'user' ? 'user' : 'bot',\r\n          timestamp: new Date()\r\n        }));\r\n        setMessages((prev) => [...prev, ...botReplies]);\r\n      } else if (data.error) {\r\n        throw new Error(data.error);\r\n      } else if (!sessionId && !data.session_id) {\r\n        console.warn('No session ID or messages received');\r\n      }\r\n    } catch (err) {\r\n      console.error('Error in handleSendMessage:', err);\r\n      setError(`Failed to get response: ${err.message}`);\r\n      setMessages((prev) => [...prev, { id: Date.now(), text: `Error: ${err.message}`, sender: 'system', timestamp: new Date() }]);\r\n    } finally {\r\n      setIsLoading(false);\r\n      document.querySelector('.chat-input-area input')?.focus();\r\n    }\r\n  };\r\n\r\n  const formatTimestamp = (date) => {\r\n    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-interface-page\">\r\n      <header className=\"page-header chat-page-header\">\r\n        <h1>DataWise Agent Chat</h1>\r\n      </header>\r\n      <div className=\"chat-interface\">\r\n        <div className=\"chat-messages\">\r\n          {messages.map((msg) => (\r\n            <div key={msg.id} className={`message ${msg.sender}`}>\r\n              <div className=\"message-bubble\">\r\n                <ReactMarkdown className=\"message-text\" remarkPlugins={[remarkGfm]}>{msg.text}</ReactMarkdown>\r\n                <span className=\"message-timestamp\">{formatTimestamp(msg.timestamp)}</span>\r\n              </div>\r\n            </div>\r\n          ))}\r\n          {error && (\r\n            <div className=\"message system\">\r\n              <div className=\"message-bubble\">\r\n                <span className=\"message-text\">{error}</span>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {isLoading && messages[messages.length - 1]?.sender === 'user' && <TypingIndicator />}\r\n          <div ref={messagesEndRef} />\r\n        </div>\r\n\r\n        {/* ---- Suggested Questions UI (Commented Out) ----\r\n        <div className=\"suggested-questions\">\r\n          {suggestedQuestions.map((suggestion, index) => (\r\n            <div\r\n              key={index}\r\n              className=\"suggestion-card\"\r\n              onClick={() => handleSuggestionClick(suggestion.question)}\r\n            >\r\n              <h4>{suggestion.heading}</h4>\r\n              <p>{suggestion.question}</p>\r\n            </div>\r\n          ))}\r\n        </div>\r\n        */}\r\n\r\n        <form className=\"chat-input-area\" onSubmit={handleSendMessage}>\r\n          <input\r\n            type=\"text\"\r\n            value={inputValue}\r\n            onChange={handleInputChange}\r\n            placeholder=\"Type your message...\"\r\n            aria-label=\"Chat input\"\r\n            disabled={isLoading}\r\n          />\r\n          <button type=\"submit\" disabled={isLoading || inputValue.trim() === ''} aria-label=\"Send message\">\r\n            {isLoading ? <div className=\"loader\"></div> : <SendIcon />}\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatInterface;"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}